{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nexports.__esModule = true;\nexports.getSortedRoutes = getSortedRoutes;\nvar UrlNode = /*#__PURE__*/function () {\n  function UrlNode() {\n    _classCallCheck(this, UrlNode);\n    this.placeholder = true;\n    this.children = new Map();\n    this.slugName = null;\n    this.restSlugName = null;\n    this.optionalRestSlugName = null;\n  }\n  _createClass(UrlNode, [{\n    key: \"insert\",\n    value: function insert(urlPath) {\n      this._insert(urlPath.split('/').filter(Boolean), [], false);\n    }\n  }, {\n    key: \"smoosh\",\n    value: function smoosh() {\n      return this._smoosh();\n    }\n  }, {\n    key: \"_smoosh\",\n    value: function _smoosh() {\n      var _this = this;\n      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n      var childrenPaths = _toConsumableArray(this.children.keys()).sort();\n      if (this.slugName !== null) {\n        childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n      }\n      if (this.restSlugName !== null) {\n        childrenPaths.splice(childrenPaths.indexOf('[...]'), 1);\n      }\n      if (this.optionalRestSlugName !== null) {\n        childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1);\n      }\n      var routes = childrenPaths.map(function (c) {\n        return _this.children.get(c)._smoosh(\"\".concat(prefix).concat(c, \"/\"));\n      }).reduce(function (prev, curr) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(curr));\n      }, []);\n      if (this.slugName !== null) {\n        routes.push.apply(routes, _toConsumableArray(this.children.get('[]')._smoosh(\"\".concat(prefix, \"[\").concat(this.slugName, \"]/\"))));\n      }\n      if (!this.placeholder) {\n        var r = prefix === '/' ? '/' : prefix.slice(0, -1);\n        if (this.optionalRestSlugName != null) {\n          throw new Error(\"You cannot define a route with the same specificity as a optional catch-all route (\\\"\".concat(r, \"\\\" and \\\"\").concat(r, \"[[...\").concat(this.optionalRestSlugName, \"]]\\\").\"));\n        }\n        routes.unshift(r);\n      }\n      if (this.restSlugName !== null) {\n        routes.push.apply(routes, _toConsumableArray(this.children.get('[...]')._smoosh(\"\".concat(prefix, \"[...\").concat(this.restSlugName, \"]/\"))));\n      }\n      if (this.optionalRestSlugName !== null) {\n        routes.push.apply(routes, _toConsumableArray(this.children.get('[[...]]')._smoosh(\"\".concat(prefix, \"[[...\").concat(this.optionalRestSlugName, \"]]/\"))));\n      }\n      return routes;\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(urlPaths, slugNames, isCatchAll) {\n      if (urlPaths.length === 0) {\n        this.placeholder = false;\n        return;\n      }\n      if (isCatchAll) {\n        throw new Error(\"Catch-all must be the last part of the URL.\");\n      } // The next segment in the urlPaths list\n      var nextSegment = urlPaths[0]; // Check if the segment matches `[something]`\n      if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n        var handleSlug = function handleSlug(previousSlug, nextSlug) {\n          if (previousSlug !== null) {\n            // If the specific segment already has a slug but the slug is not `something`\n            // This prevents collisions like:\n            // pages/[post]/index.js\n            // pages/[id]/index.js\n            // Because currently multiple dynamic params on the same segment level are not supported\n            if (previousSlug !== nextSlug) {\n              // TODO: This error seems to be confusing for users, needs an err.sh link, the description can be based on above comment.\n              throw new Error(\"You cannot use different slug names for the same dynamic path ('\".concat(previousSlug, \"' !== '\").concat(nextSlug, \"').\"));\n            }\n          }\n          slugNames.forEach(function (slug) {\n            if (slug === nextSlug) {\n              throw new Error(\"You cannot have the same slug name \\\"\".concat(nextSlug, \"\\\" repeat within a single dynamic path\"));\n            }\n            if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n              throw new Error(\"You cannot have the slug names \\\"\".concat(slug, \"\\\" and \\\"\").concat(nextSlug, \"\\\" differ only by non-word symbols within a single dynamic path\"));\n            }\n          });\n          slugNames.push(nextSlug);\n        };\n        // Strip `[` and `]`, leaving only `something`\n        var segmentName = nextSegment.slice(1, -1);\n        var isOptional = false;\n        if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n          // Strip optional `[` and `]`, leaving only `something`\n          segmentName = segmentName.slice(1, -1);\n          isOptional = true;\n        }\n        if (segmentName.startsWith('...')) {\n          // Strip `...`, leaving only `something`\n          segmentName = segmentName.substring(3);\n          isCatchAll = true;\n        }\n        if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n          throw new Error(\"Segment names may not start or end with extra brackets ('\".concat(segmentName, \"').\"));\n        }\n        if (segmentName.startsWith('.')) {\n          throw new Error(\"Segment names may not start with erroneous periods ('\".concat(segmentName, \"').\"));\n        }\n        if (isCatchAll) {\n          if (isOptional) {\n            if (this.restSlugName != null) {\n              throw new Error(\"You cannot use both an required and optional catch-all route at the same level (\\\"[...\".concat(this.restSlugName, \"]\\\" and \\\"\").concat(urlPaths[0], \"\\\" ).\"));\n            }\n            handleSlug(this.optionalRestSlugName, segmentName); // slugName is kept as it can only be one particular slugName\n            this.optionalRestSlugName = segmentName; // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n            nextSegment = '[[...]]';\n          } else {\n            if (this.optionalRestSlugName != null) {\n              throw new Error(\"You cannot use both an optional and required catch-all route at the same level (\\\"[[...\".concat(this.optionalRestSlugName, \"]]\\\" and \\\"\").concat(urlPaths[0], \"\\\").\"));\n            }\n            handleSlug(this.restSlugName, segmentName); // slugName is kept as it can only be one particular slugName\n            this.restSlugName = segmentName; // nextSegment is overwritten to [...] so that it can later be sorted specifically\n            nextSegment = '[...]';\n          }\n        } else {\n          if (isOptional) {\n            throw new Error(\"Optional route parameters are not yet supported (\\\"\".concat(urlPaths[0], \"\\\").\"));\n          }\n          handleSlug(this.slugName, segmentName); // slugName is kept as it can only be one particular slugName\n          this.slugName = segmentName; // nextSegment is overwritten to [] so that it can later be sorted specifically\n          nextSegment = '[]';\n        }\n      } // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n      if (!this.children.has(nextSegment)) {\n        this.children.set(nextSegment, new UrlNode());\n      }\n      this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames, isCatchAll);\n    }\n  }]);\n  return UrlNode;\n}();\nfunction getSortedRoutes(normalizedPages) {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  var root = new UrlNode(); // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach(function (pagePath) {\n    return root.insert(pagePath);\n  }); // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh();\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/sorted-routes.ts"],"names":["UrlNode","placeholder","children","Map","slugName","restSlugName","optionalRestSlugName","insert","urlPath","_insert","split","filter","Boolean","smoosh","_smoosh","prefix","childrenPaths","keys","sort","splice","indexOf","routes","map","c","get","reduce","prev","curr","push","r","slice","Error","unshift","urlPaths","slugNames","isCatchAll","length","nextSegment","startsWith","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","replace","has","set","getSortedRoutes","normalizedPages","root","pagePath"],"mappings":"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","sourcesContent":["class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an err.sh link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\nexport function getSortedRoutes(normalizedPages: string[]): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n"]},"metadata":{},"sourceType":"script"}